C++ 언어에서 포인터(pointer)를 알아보겠습니다.

포인터란 메모리 주소를 저장하는 변수를 말합니다. 메모리 주소는 컴퓨터 내부에서 데이터를 저장하는 공간을 가리킵니다. 즉, 포인터는 메모리 공간의 주소를 저장하여 그 곳의 값을 참조할 수 있게 합니다.

포인터를 사용하면 메모리를 효율적으로 사용할 수 있으며, 동적 메모리 할당과 같은 작업에 사용됩니다.

포인터를 선언할 때는 데이터형 뒤에 *을 붙여 표시합니다. 예를 들어 int형 포인터를 선언할 때는 다음과 같이 작성합니다.

```cpp
int* ptr;
```

위와 같이 선언한 포인터 변수 ptr은 int형 변수를 가리키는 포인터입니다. 이제 이 포인터에 int형 변수의 주소를 할당해 보겠습니다.

```cpp
int num = 10;
int* ptr = &num;
```

위 코드에서 &num은 변수 num의 주소를 나타내고, ptr에는 이 주소가 할당됩니다. 따라서 ptr은 num의 값을 참조할 수 있는 포인터가 되는 것입니다.

포인터를 이용하여 값을 참조할 때는 *를 사용합니다. 예를 들어 다음과 같은 코드에서는 포인터 ptr이 가리키는 변수 num의 값을 20으로 변경합니다.

```cpp
*ptr = 20;
```

이제 num의 값은 20이 됩니다.

포인터는 배열과 함께 사용할 때 유용합니다. 예를 들어 배열의 첫 번째 요소를 가리키는 포인터는 다음과 같이 표현할 수 있습니다.

```cpp
int arr[5] = {1, 2, 3, 4, 5};
int* ptr = arr;
```

위 코드에서 arr은 배열의 첫 번째 요소의 주소를 가리키게 됩니다. 그리고 이 주소를 ptr에 할당하면 ptr은 배열의 첫 번째 요소를 가리키게 됩니다.

포인터를 사용할 때는 반드시 NULL로 초기화해야 합니다. 그리고 포인터가 가리키는 값이 유효한지 항상 확인해야 합니다. 포인터가 NULL인 경우에는 메모리 에러가 발생할 수 있기 때문입니다.

이상으로 C++ 언어에서 포인터에 대해 간단한 설명과 예시를 살펴보았습니다. 포인터는 C++ 언어에서 중요한 개념이므로, 반드시 숙지해야 합니다.