Java는 Object-Oriented Programming 언어입니다. 이는 프로그래밍에서 모든 것이 객체로 간주되고, 객체 간 상호 작용을 통해 프로그래밍이 이루어진다는 것입니다. 이러한 객체는 데이터와 기능을 포함할 수 있습니다. 다시 말해, 객체는 데이터(변수)와 행동(메소드)으로 구성됩니다.

Java에서 클래스(Class)는 객체를 만드는 데 사용되는 설계도입니다. 클래스는 데이터 유형, 변수 및 메소드의 조합을 결합할 수 있으며, 클래스를 기반으로 객체를 만듭니다. 클래스의 생성자(Constructor)는 객체를 초기화하는 데 사용됩니다.

예를 들어, Person 클래스를 만들어 볼 수 있습니다. 이 클래스는 사람의 이름, 나이, 성별 등과 같은 변수를 포함하고, Person 객체에 대해 인사하는 sayHello() 메소드를 가질 수 있습니다.

```java
public class Person {
  // 인스턴스 변수
  String name;
  int age;
  char gender;
  
  // 생성자
  public Person(String name, int age, char gender) {
    this.name = name;
    this.age = age;
    this.gender = gender;
  }
  
  // 인사하는 메소드
  public void sayHello() {
    System.out.println("안녕하세요, 저는 " + name + "입니다.");
  }
}
```

이제 Person 클래스의 객체를 만들어 사용할 수 있습니다.

```java
public class Main {
  public static void main(String[] args) {
    Person person1 = new Person("홍길동", 25, '남');
    Person person2 = new Person("김철수", 30, '남');
    
    person1.sayHello(); // 출력값: 안녕하세요, 저는 홍길동입니다.
    person2.sayHello(); // 출력값: 안녕하세요, 저는 김철수입니다.
  }
}
```

Java의 객체 지향 프로그래밍의 장점 중 하나는 재사용성입니다. 클래스를 작성하기만 하면, 여러 곳에서 사용할 수 있는 객체를 만들 수 있습니다. 또한, 상속을 사용하여 새로운 클래스를 만들고, 기존 클래스를 사용하여 새로운 클래스를 만들 수 있는 기능을 제공합니다.

마지막으로, Java는 인터페이스(Interface)도 지원합니다. 인터페이스는 클래스와 마찬가지로 객체 생성에 사용되지 않지만, 클래스가 구현해야 하는 메소드를 정의하는 데 사용됩니다. 이를 통해 Java는 일관성 있는 메소드를 보장하고, 다중 상속을 지원합니다.