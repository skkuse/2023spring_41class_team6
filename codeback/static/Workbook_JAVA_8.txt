자바에서 Inheritance(상속)은 OOP(Object-Oriented Programming)의 핵심 개념 중 하나입니다. 상속은 이미 존재하는 클래스에서 또 다른 클래스를 만드는 것으로, 새 클래스는 원본 클래스의 특성과 기능을 모두 상속받습니다.

이 과정에서, 엄격하게 Typed가 됩니다. 그러나 그것은 유지 관리하기가 편하며, 더 나은 코드 작성을 위한 솔루션으로 자주 사용됩니다. 상속 계층을 만들기 위해 부모 클래스, 즉 원본 클래스를 작성하고, 자식 클래스를 작성합니다. 자식 클래스는 부모 클래스의 모든 데이터 멤버 및 메서드를 상속받으며, 상속받은 메서드를 재정의(override)할 수 있습니다.

아래는 간단한 상속 구조를 사용한 예시입니다.

```
class Vehicle {
  protected String brand = "Ford";        // Vehicle 클래스의 멤버 변수

  public void honk() {                    // Vehicle 클래스의 메서드 호출
    System.out.println("Tuut, tuut!");
  }
}

class Car extends Vehicle {
  private String modelName = "Mustang";   // Car 클래스의 멤버 변수

  public static void main(String[] args) {

    // Car 클래스 인스턴스 생성
    Car myCar = new Car();

    // 부모 클래스로부터 상속받은 멤버 변수 출력
    System.out.println(myCar.brand + " " + myCar.modelName);

    // 부모 클래스로부터 상속받은 메서드 호출
    myCar.honk();
  }
}
```

위 예시에서, `Car` 클래스는 `Vehicle` 클래스를 상속받았으며, `Car` 클래스는 이제 `Vehicle` 클래스에서 상속받은 `brand` 메서드를 사용할 수 있습니다. 이 예시에서는 `Car` 클래스 인스턴스를 만들고 `brand`와 `modelName` 멤버 변수를 출력하고, `honk()` 메서드를 호출합니다.

상속은 다중 상속을 허용하지 않으며, 자식 클래스는 하나의 부모 클래스만 상속합니다. 또한, 자식 클래스는 부모 클래스의 `private` 멤버에 접근할 수 없지만, `protected`나 `public` 멤버에는 접근할 수 있습니다.

상속을 사용하면 코드 재사용성에 대한 이점을 얻을 수 있습니다. 기존 클래스를 가져와 새로운 클래스를 작성하는 것은 매우 효율적이며, 기존 클래스의 모든 특성을 상속하여 새로운 클래스를 만들 때 시간과 노력을 절약할 수 있습니다. 또한, 상속은 객체 지향 프로그래밍에서 코드의 추상화를 촉진하며, 코드의 일관성과 유지 보수성을 높입니다.