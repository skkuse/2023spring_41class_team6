Java 언어에서 다형성(Polymorphism)은 객체지향 프로그래밍(OOP)의 특징 중 하나로 같은 이름의 메서드나 연산자를 여러 개 정의하고 이들 중에서 어느 것을 실행할 것인지는 전달되는 인자의 타입에 따라 달라지도록 구성하는 것을 말합니다.

간단한 예시로 살펴보면 도형 클래스에서 calculateArea 메소드를 구현한다고 가정해보겠습니다. 이 경우, 도형 클래스에서 모든 도형의 넓이를 계산하는 코드를 작성할 수는 있지만, 각 도형마다 다른 면적을 계산할 필요가 있어집니다. 이 때 사용하는 것이 다형성입니다.

우선, 다양한 도형을 나타내는 클래스를 만듭니다. Square, Rectangle, Circle 클래스를 만든다고 가정해보겠습니다. 이때, 각 클래스마다 calculateArea 메소드를 각각 구현합니다.
```java
class Square {
    private int side;
  
    public Square(int side) {
        this.side = side;
    }
  
    public int calculateArea() {
        return side * side;
    }
}

class Rectangle {
    private int length;
    private int width;
  
    public Rectangle(int length, int width) {
        this.length = length;
        this.width = width;
    }
  
    public int calculateArea() {
        return length * width;
    }
}

class Circle {
    private int radius;
  
    public Circle(int radius) {
        this.radius = radius;
    }
  
    public int calculateArea() {
        return (int) (Math.PI * radius * radius);
    }
}
```
이제 이를 호출하는 코드에서는 다형성을 이용해서 넓이를 계산할 도형 객체를 결정하도록 구현할 수 있습니다.
```java
public int calculateArea(Shape shape) {
    return shape.calculateArea();
}

Square square = new Square(5);
Rectangle rectangle = new Rectangle(4, 6);
Circle circle = new Circle(3);

int squareArea = calculateArea(square);
int rectArea = calculateArea(rectangle);
int circleArea = calculateArea(circle);

System.out.println("Square area: " + squareArea);
System.out.println("Rectangle area: " + rectArea);
System.out.println("Circle area: " + circleArea);
```
위 코드에서 calculateArea 메소드는 Shape 타입의 인자를 받고, 이를 이용해서 shape.calculateArea()를 호출하여 넓이를 계산합니다.

여기서 Shape 클래스는 다른 도형 클래스를 모두 포괄하는 상위 클래스입니다. 이렇게 상위 클래스를 두고 하위 클래스에서 상속받은 메소드를 오버라이딩하여 다양한 구현을 가능하게 만듭니다.

이처럼 Java에서 다형성은 객체지향 프로그래밍의 핵심 개념 중 하나로, 상속을 이용하여 상위 클래스와 하위 클래스 사이의 관계를 구성하고, 오버라이딩을 통해 하위 클래스에서 상위 클래스의 메소드를 재정의하여 다양한 구현을 가능하게 합니다.