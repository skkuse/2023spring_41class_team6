JavaScript는 웹 개발에서 가장 널리 사용되는 스크립트 언어입니다. 그러나 우리는 모두간에 전문가가 아니기 때문에 때로는 오류가 발생합니다. 우리는 이러한 오류를 처리해야 하며, JavaScript에서는 다양한 방법으로 처리할 수 있습니다.

가장 많이 사용되는 오류 처리 방법은 try-catch문입니다. 이것은 예외 상황이 발생할 때 코드를 실행하는 것을 중지하고 오류를 처리할 수 있는 기능을 제공합니다. 아래의 예시 코드와 함께 자세히 살펴보겠습니다.

```
try {
  // 코드 실행
} catch (error) {
  // 오류 상황 처리
}
```

예를 들어, 다음과 같은 코드가 있다고 가정해 봅시다.

```
let num = "hello";
console.log(num*2);
```

이 코드의 결과는 NaN으로 돌아옵니다. 따라서 우리는 예외 상황을 처리해야 합니다. 이를 위해 try-catch문을 사용할 수 있습니다.

```
try {
  let num = "hello";
  console.log(num*2);
} catch (error) {
  console.log("숫자가 아닌 변수가 사용되어 오류 발생!");
}
```

위 코드에서 try 블럭 안에서 num 변수의 값을 문자열로 할당하고, 이를 숫자로 변환할 수 없는 곱하기 연산을 시도합니다. 이 때, 오류가 발생하면 catch 블록 안의 코드가 실행됩니다. 이 경우, catch 블록 안에서는 "숫자가 아닌 변수가 사용되어 오류 발생!"이라는 문자열을 출력합니다.

이와 같이 try-catch문은 코드를 작성하는 단계에서 예상치 못한 상황에 대비하는 것으로 코드의 안정성을 높힐 수 있습니다.

또 다른 유용한 오류 처리 방법은 throw 문입니다. 이 방법은 개발자가 직접 오류를 발생시키고 이를 처리할 수 있도록 하는 방법입니다. 아래의 예시 코드와 함께 살펴보겠습니다.

```
function divide(a, b) {
  if (b === 0) {
    throw "0으로 나눌 수 없습니다.";
  } else {
    return a / b;
  }
}

console.log(divide(6, 2)); // 3
console.log(divide(5, 0)); // 에러 발생
```

위 코드에서 divide 함수는 두 개의 인수를 받아 첫 번째 인수를 두 번째 인수로 나눕니다. 그러나 두 번째 인수가 0일 경우 오류가 발생하게 됩니다. 이 때, throw 문을 사용하여 "0으로 나눌 수 없습니다."라는 오류를 발생시킬 수 있습니다.

따라서 이러한 예외 상황을 처리하기 위해 catch 문을 사용할 수 있습니다. 이를 위해서는 try-catch문으로 코드를 감싸줘야 합니다.

```
try {
  console.log(divide(6, 2)); // 3
  console.log(divide(5, 0)); // 에러 발생
} catch (error) {
  console.log(error);
}
```

위 코드에서 try 블록에서 divide 함수를 두 번 호출합니다. 첫 번째 경우는 문제 없이 작동하지만, 두 번째 경우는 b가 0이기 때문에 throw 문이 실행되고, 이를 catch 블록에서 처리합니다. 이 때, "0으로 나눌 수 없습니다."라는 문자열이 출력됩니다.

이러한 오류 처리 방법은 코드를 개발하는 단계에서 예상치 못한 오류를 방지하고, 더욱 안정적인 코드를 구현하는 데 도움이 됩니다.