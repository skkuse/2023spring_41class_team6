안녕하세요! JAVA 언어에 대한 Files and Streams에 대해서 설명드리겠습니다.

JAVA에서 Files and Streams을 다루는 것은 매우 중요한 부분입니다. 파일 입출력은 우리가 일상적으로 다루는 컴퓨터와의 상호작용에서 큰 비중을 차지합니다. JAVA에서 파일로부터 데이터를 읽거나 파일에 데이터를 쓰는 방법을 배우면, 많이 다루게 될 것입니다.

JAVA에서 파일을 다루기 위해서는, 먼저 java.io 패키지를 import해야 합니다. FileReader, FileWriter, BufferedReader, BufferedWriter, File 클래스 등이 이 패키지에 포함되어 있습니다.

먼저, 파일 작성부터 시작해보겠습니다. 파일 작성을 위해 FileWriter 클래스를 사용합니다. 다음 예제를 참고해보시죠.

```java
import java.io.FileWriter;
import java.io.IOException;

public class FileWriteExample {
    public static void main(String[] args) throws IOException {
        String data = "Hello, World!";
        FileWriter fileWriter = new FileWriter("filename.txt");
        fileWriter.write(data);
        fileWriter.close();
        System.out.println("파일에 데이터를 성공적으로 썼습니다.");
    }
}
```

위 예제에서, FileWriter 클래스의 객체를 생성한 뒤, write() 메소드를 이용해 파일에 쓰고자 하는 데이터를 넘겨줍니다. 그리고 close() 메소드를 통해서 파일과의 연결을 종료합니다. 

이번에는 파일로부터 데이터를 읽어와보겠습니다. 파일을 읽기 위해서는 FileReader 클래스와 BufferedReader 클래스를 이용해야 합니다. 다음 예제를 참고해보죠.

```java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileReadExample {
    public static void main(String[] args) throws IOException {
        FileReader fileReader = new FileReader("filname.txt");
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        String line;
        while ((line = bufferedReader.readLine()) != null) {
            System.out.println(line);
        }
        bufferedReader.close();
    }
}
```

위 예제에서, FileReader 클래스와 BufferedReader 클래스의 객체를 생성한 뒤, readLine() 메소드를 이용해 파일로부터 한 줄씩 데이터를 읽어옵니다. null을 만날 때까지 루프를 돌리면서 한 줄씩 출력해주면 됩니다. 

이렇게 JAVA에서 파일을 다루는 법을 간단하게 살펴보았습니다. 물론 파일 핸들링은 더 복잡해질 수도 있습니다. 하지만 이번 글에서 다룬 기본적인 내용들을 숙지하신다면, 더 복잡한 파일 핸들링도 가능할 것입니다.