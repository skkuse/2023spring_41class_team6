JavaScript 언어에서 함수는 여러 개의 코드를 묶어 한 번에 실행할 수 있는 기능을 제공합니다. 이를 통해 코드의 재사용성을 높이고, 변수와 데이터의 처리를 간편하게 할 수 있습니다.

함수를 사용하려면 먼저 함수를 정의해야 합니다. 함수를 정의하는 방법은 다음과 같습니다.

```javascript
function 함수이름(매개변수1, 매개변수2, ...) {
  실행할 코드;
  return 반환값;
}
```

함수 이름은 자유롭게 지정할 수 있으며, 실행할 코드와 반환값은 함수 내부에 작성됩니다. 매개변수는 함수 실행 시 외부에서 전달되는 값으로, 필요한 만큼 작성할 수 있습니다. 반환값은 함수의 실행 결과를 의미하며, return 키워드를 사용해 명시합니다. 반환값이 없을 경우 생략할 수 있습니다.

함수를 정의한 후에는 해당 함수를 호출할 수 있습니다. 함수를 호출하는 방법은 다음과 같습니다.

```javascript
함수이름(인수1, 인수2, ...);
```

함수를 호출할 때는 함수 이름 다음에 소괄호를 열고, 매개변수와 일치하는 인수를 전달합니다. 함수 호출 결과로 반환값이 반환됩니다.

예를 들어, 두 수를 더하는 함수를 정의하고 호출하는 코드는 다음과 같습니다.

```javascript
function add(num1, num2) {
  var sum = num1 + num2;
  return sum;
}

var result = add(10, 20); // 10과 20을 더한 값인 30을 반환합니다.
console.log(result); // 30
```

위 코드에서 add 함수는 두 개의 매개변수 num1과 num2를 받아 더한 후, 결과를 반환합니다. add 함수를 호출한 후 반환값을 result 변수에 저장하고 콘솔에 출력하면 30이 출력됩니다.

함수는 반복되는 코드를 줄이고, 코드의 가독성과 유지보수성을 높일 수 있습니다. 코드를 작성할 때 함수를 적극 활용하여 생산성을 높이세요.