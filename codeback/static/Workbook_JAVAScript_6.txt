JavaScript 언어에서 제어문은 프로그램의 흐름을 조절하는 역할을 담당합니다. 특정 조건에 따라 코드를 실행하거나 반복 수행하게 하는 등 프로그램의 동작을 제어할 수 있습니다.

가장 일반적으로 사용되는 제어문은 조건문과 반복문입니다. 조건문은 특정 조건이 참이면 코드를 실행하고, 거짓이면 실행하지 않습니다. 반면 반복문은 코드를 반복적으로 실행하는 구문입니다.

조건문에는 if문과 switch문이 있습니다. if문은 주어진 조건이 참이면 코드를 실행하고, 거짓이면 실행하지 않습니다. 예시 코드를 살펴봅시다.

```
let num = 10;

if (num > 0) {
  console.log("양수입니다.");
} else if (num < 0) {
  console.log("음수입니다.");
} else {
  console.log("0입니다.");
}
```

위 코드에서는 변수 num이 0보다 크면 "양수입니다."를 출력하고, 0보다 작으면 "음수입니다."를 출력합니다. 만약 num이 0이면 "0입니다."를 출력합니다.

switch문은 if문과 비슷하지만 다양한 조건을 하나의 구문으로 표현할 수 있습니다. 예시 코드를 살펴봅시다.

```
let fruit = "사과";

switch (fruit) {
  case "사과":
    console.log("사과입니다.");
    break;
  case "바나나":
    console.log("바나나입니다.");
    break;
  default:
    console.log("과일이 아닙니다.");
}
```

위 코드에서는 변수 fruit의 값이 "사과"이면 "사과입니다."를 출력하고, "바나나"면 "바나나입니다."를 출력합니다. fruit의 값이 "사과"나 "바나나"가 아니면 "과일이 아닙니다."를 출력합니다.

반복문에는 for문과 while문이 있습니다. for문은 정해진 횟수만큼 코드를 반복 수행합니다. 예시 코드를 살펴봅시다.

```
for (let i = 0; i < 10; i++) {
  console.log(i);
}
```

위 코드에서는 i 변수를 0으로 초기화하고, i가 10보다 작을 때까지 코드를 반복 수행합니다. 반복할 때마다 i를 1씩 증가시킵니다. 결과적으로 0부터 9까지의 숫자를 출력합니다.

while문은 주어진 조건이 참인 동안 코드를 반복 수행합니다. 예시 코드를 살펴봅시다.

```
let i = 0;

while (i < 10) {
  console.log(i);
  i++;
}
```

위 코드에서는 i 변수를 0으로 초기화하고, i가 10보다 작을 때까지 코드를 반복 수행합니다. 반복할 때마다 i를 1씩 증가시킵니다. 결과적으로 0부터 9까지의 숫자를 출력합니다.

위와 같이 제어문을 사용하여 프로그램의 흐름을 관리할 수 있습니다. 다양한 경우에 따라 적절한 제어문을 사용하여 프로그램을 작성할 수 있도록 연습해보세요.