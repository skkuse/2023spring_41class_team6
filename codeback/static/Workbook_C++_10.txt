C++ 언어에서 동적할당은 프로그램 실행 중에 메모리를 할당하여 사용하는 방법입니다. 이는 정적할당과 다르게 프로그램이 컴파일되는 시점에 크기가 결정되는 것이 아닌 프로그램이 실행되는 도중에 메모리 공간을 동적으로 할당하여 사용합니다.

동적할당은 heap 영역에서 이루어집니다. 일반적으로 heap은 global 변수와 static 변수가 위치한 데이터 영역 바로 위쪽에 있는 메모리 공간입니다. 동적으로 할당할 메모리 크기가 미리 결정되어 있지 않거나 프로그램 실행 중에 메모리 할당량이 계속해서 변화해야 하는 경우에 주로 사용됩니다.

C++에서는 `new` 연산자를 사용하여 메모리 동적할당을 할 수 있습니다. 할당된 메모리는 주로 포인터 변수를 통해 사용됩니다. 예를 들어, 아래 코드는 크기가 10인 정수형 배열을 동적할당하여 사용하는 예시입니다.

```cpp
int main() {
    int* ptr = new int[10];
    for (int i = 0; i < 10; i++) {
        ptr[i] = i;
    }
    for (int i = 0; i < 10; i++) {
        cout << ptr[i] << endl;
    }
    delete[] ptr; // 동적 할당된 메모리 반환
    return 0;
}
```

위 코드에서 `new` 연산자를 사용하여 크기가 10인 정수형 배열을 메모리에 동적할당하고, `ptr` 포인터 변수를 통해 이를 사용합니다. 동적할당된 배열에는 `for`문을 통해 값을 대입하고 출력하며, 이후 `delete[]` 연산자를 사용해 예약된 메모리를 해제합니다.

동적할당을 사용하는 경우, 반드시 해제하는 작업을 수행해야 합니다. 메모리를 반환하지 않는 경우 메모리 누수(memory leak)가 발생하여 프로그램의 성능에 영향을 주게 됩니다. 따라서, 적극적으로 메모리 할당과 반환을 관리해주어야 하며, `new` 연산자 사용 시 반드시 `delete` 연산자를 사용하여 메모리를 반환해주어야 합니다.